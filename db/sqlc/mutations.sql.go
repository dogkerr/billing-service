// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: mutations.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createMutation = `-- name: CreateMutation :one
INSERT INTO mutations_table (
    user_id,
    mutation,
    balance,
    type,
    deposit_id,
    charge_id
  )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, mutation, balance, type, deposit_id, charge_id
`

type CreateMutationParams struct {
	UserID    string      `json:"user_id"`
	Mutation  float64     `json:"mutation"`
	Balance   float64     `json:"balance"`
	Type      interface{} `json:"type"`
	DepositID pgtype.UUID `json:"deposit_id"`
	ChargeID  pgtype.UUID `json:"charge_id"`
}

func (q *Queries) CreateMutation(ctx context.Context, arg CreateMutationParams) (MutationsTable, error) {
	row := q.db.QueryRow(ctx, createMutation,
		arg.UserID,
		arg.Mutation,
		arg.Balance,
		arg.Type,
		arg.DepositID,
		arg.ChargeID,
	)
	var i MutationsTable
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Mutation,
		&i.Balance,
		&i.Type,
		&i.DepositID,
		&i.ChargeID,
	)
	return i, err
}

const deleteMutation = `-- name: DeleteMutation :exec
DELETE FROM mutations_table
WHERE id = $1
`

func (q *Queries) DeleteMutation(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteMutation, id)
	return err
}

const getMutation = `-- name: GetMutation :one
SELECT id, user_id, mutation, balance, type, deposit_id, charge_id
FROM mutations_table
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetMutation(ctx context.Context, id uuid.UUID) (MutationsTable, error) {
	row := q.db.QueryRow(ctx, getMutation, id)
	var i MutationsTable
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Mutation,
		&i.Balance,
		&i.Type,
		&i.DepositID,
		&i.ChargeID,
	)
	return i, err
}

const listMutations = `-- name: ListMutations :many
SELECT id, user_id, mutation, balance, type, deposit_id, charge_id
FROM mutations_table
WHERE user_id = $1
ORDER BY id
LIMIT $2 OFFSET $3
`

type ListMutationsParams struct {
	UserID string `json:"user_id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListMutations(ctx context.Context, arg ListMutationsParams) ([]MutationsTable, error) {
	rows, err := q.db.Query(ctx, listMutations, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MutationsTable{}
	for rows.Next() {
		var i MutationsTable
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Mutation,
			&i.Balance,
			&i.Type,
			&i.DepositID,
			&i.ChargeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMutation = `-- name: UpdateMutation :one
UPDATE mutations_table
SET balance = $2,
  type = $3
WHERE id = $1
RETURNING id, user_id, mutation, balance, type, deposit_id, charge_id
`

type UpdateMutationParams struct {
	ID      uuid.UUID   `json:"id"`
	Balance float64     `json:"balance"`
	Type    interface{} `json:"type"`
}

func (q *Queries) UpdateMutation(ctx context.Context, arg UpdateMutationParams) (MutationsTable, error) {
	row := q.db.QueryRow(ctx, updateMutation, arg.ID, arg.Balance, arg.Type)
	var i MutationsTable
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Mutation,
		&i.Balance,
		&i.Type,
		&i.DepositID,
		&i.ChargeID,
	)
	return i, err
}
