// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: charges.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCharge = `-- name: CreateCharge :one
INSERT INTO charges_table (
    container_id,
    user_id,
    total_cpu_usage,
    total_memory_usage,
    total_net_ingress_usage,
    total_net_egress_usage,
    timestamp,
    total_cost
  )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, container_id, user_id, total_cpu_usage, total_memory_usage, total_net_ingress_usage, total_net_egress_usage, timestamp, total_cost
`

type CreateChargeParams struct {
	ContainerID          string           `json:"container_id"`
	UserID               string           `json:"user_id"`
	TotalCpuUsage        float64          `json:"total_cpu_usage"`
	TotalMemoryUsage     float64          `json:"total_memory_usage"`
	TotalNetIngressUsage float64          `json:"total_net_ingress_usage"`
	TotalNetEgressUsage  float64          `json:"total_net_egress_usage"`
	Timestamp            pgtype.Timestamp `json:"timestamp"`
	TotalCost            float64          `json:"total_cost"`
}

func (q *Queries) CreateCharge(ctx context.Context, arg CreateChargeParams) (ChargesTable, error) {
	row := q.db.QueryRow(ctx, createCharge,
		arg.ContainerID,
		arg.UserID,
		arg.TotalCpuUsage,
		arg.TotalMemoryUsage,
		arg.TotalNetIngressUsage,
		arg.TotalNetEgressUsage,
		arg.Timestamp,
		arg.TotalCost,
	)
	var i ChargesTable
	err := row.Scan(
		&i.ID,
		&i.ContainerID,
		&i.UserID,
		&i.TotalCpuUsage,
		&i.TotalMemoryUsage,
		&i.TotalNetIngressUsage,
		&i.TotalNetEgressUsage,
		&i.Timestamp,
		&i.TotalCost,
	)
	return i, err
}

const deleteCharge = `-- name: DeleteCharge :exec
DELETE FROM charges_table
WHERE id = $1
`

func (q *Queries) DeleteCharge(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCharge, id)
	return err
}

const getCharge = `-- name: GetCharge :one
SELECT id, container_id, user_id, total_cpu_usage, total_memory_usage, total_net_ingress_usage, total_net_egress_usage, timestamp, total_cost
FROM charges_table
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCharge(ctx context.Context, id uuid.UUID) (ChargesTable, error) {
	row := q.db.QueryRow(ctx, getCharge, id)
	var i ChargesTable
	err := row.Scan(
		&i.ID,
		&i.ContainerID,
		&i.UserID,
		&i.TotalCpuUsage,
		&i.TotalMemoryUsage,
		&i.TotalNetIngressUsage,
		&i.TotalNetEgressUsage,
		&i.Timestamp,
		&i.TotalCost,
	)
	return i, err
}

const listCharges = `-- name: ListCharges :many
SELECT id, container_id, user_id, total_cpu_usage, total_memory_usage, total_net_ingress_usage, total_net_egress_usage, timestamp, total_cost
FROM charges_table
WHERE user_id = $1
ORDER BY id
LIMIT $2 OFFSET $3
`

type ListChargesParams struct {
	UserID string `json:"user_id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListCharges(ctx context.Context, arg ListChargesParams) ([]ChargesTable, error) {
	rows, err := q.db.Query(ctx, listCharges, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ChargesTable{}
	for rows.Next() {
		var i ChargesTable
		if err := rows.Scan(
			&i.ID,
			&i.ContainerID,
			&i.UserID,
			&i.TotalCpuUsage,
			&i.TotalMemoryUsage,
			&i.TotalNetIngressUsage,
			&i.TotalNetEgressUsage,
			&i.Timestamp,
			&i.TotalCost,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCharge = `-- name: UpdateCharge :one
UPDATE charges_table
SET total_cost = $2
WHERE id = $1
RETURNING id, container_id, user_id, total_cpu_usage, total_memory_usage, total_net_ingress_usage, total_net_egress_usage, timestamp, total_cost
`

type UpdateChargeParams struct {
	ID        uuid.UUID `json:"id"`
	TotalCost float64   `json:"total_cost"`
}

func (q *Queries) UpdateCharge(ctx context.Context, arg UpdateChargeParams) (ChargesTable, error) {
	row := q.db.QueryRow(ctx, updateCharge, arg.ID, arg.TotalCost)
	var i ChargesTable
	err := row.Scan(
		&i.ID,
		&i.ContainerID,
		&i.UserID,
		&i.TotalCpuUsage,
		&i.TotalMemoryUsage,
		&i.TotalNetIngressUsage,
		&i.TotalNetEgressUsage,
		&i.Timestamp,
		&i.TotalCost,
	)
	return i, err
}
