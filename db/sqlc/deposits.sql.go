// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: deposits.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createDeposit = `-- name: CreateDeposit :one
INSERT INTO deposits_table (user_id, value, status)
VALUES ($1, $2, $3)
RETURNING id, user_id, value, status
`

type CreateDepositParams struct {
	UserID string  `json:"user_id"`
	Value  float64 `json:"value"`
	Status string  `json:"status"`
}

func (q *Queries) CreateDeposit(ctx context.Context, arg CreateDepositParams) (DepositsTable, error) {
	row := q.db.QueryRow(ctx, createDeposit, arg.UserID, arg.Value, arg.Status)
	var i DepositsTable
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Value,
		&i.Status,
	)
	return i, err
}

const deleteDeposit = `-- name: DeleteDeposit :exec
DELETE FROM deposits_table
WHERE id = $1
`

func (q *Queries) DeleteDeposit(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteDeposit, id)
	return err
}

const getDeposit = `-- name: GetDeposit :one
SELECT id, user_id, value, status
FROM deposits_table
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetDeposit(ctx context.Context, id uuid.UUID) (DepositsTable, error) {
	row := q.db.QueryRow(ctx, getDeposit, id)
	var i DepositsTable
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Value,
		&i.Status,
	)
	return i, err
}

const listDeposits = `-- name: ListDeposits :many
SELECT id, user_id, value, status
FROM deposits_table
WHERE user_id = $1
ORDER BY id
LIMIT $2 OFFSET $3
`

type ListDepositsParams struct {
	UserID string `json:"user_id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListDeposits(ctx context.Context, arg ListDepositsParams) ([]DepositsTable, error) {
	rows, err := q.db.Query(ctx, listDeposits, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DepositsTable{}
	for rows.Next() {
		var i DepositsTable
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Value,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDeposit = `-- name: UpdateDeposit :one
UPDATE deposits_table
SET status = $2
WHERE id = $1
RETURNING id, user_id, value, status
`

type UpdateDepositParams struct {
	ID     uuid.UUID `json:"id"`
	Status string    `json:"status"`
}

func (q *Queries) UpdateDeposit(ctx context.Context, arg UpdateDepositParams) (DepositsTable, error) {
	row := q.db.QueryRow(ctx, updateDeposit, arg.ID, arg.Status)
	var i DepositsTable
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Value,
		&i.Status,
	)
	return i, err
}
