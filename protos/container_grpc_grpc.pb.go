// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: container_grpc.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ContainerGRPCService_Hello_FullMethodName                           = "/containerservice.ContainerGRPCService/Hello"
	ContainerGRPCService_ContainerTerminatedAccidentally_FullMethodName = "/containerservice.ContainerGRPCService/ContainerTerminatedAccidentally"
	ContainerGRPCService_StopContainerCreditLimit_FullMethodName        = "/containerservice.ContainerGRPCService/StopContainerCreditLimit"
	ContainerGRPCService_GetContainerStatus_FullMethodName              = "/containerservice.ContainerGRPCService/GetContainerStatus"
)

// ContainerGRPCServiceClient is the client API for ContainerGRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContainerGRPCServiceClient interface {
	Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error)
	ContainerTerminatedAccidentally(ctx context.Context, in *ContainerTerminatedAccidentallyReq, opts ...grpc.CallOption) (*ContainerTerminatedAccidentallyRes, error)
	StopContainerCreditLimit(ctx context.Context, in *StopUserContainerCreditLimitReq, opts ...grpc.CallOption) (*StopUserContainerCreditLimitRes, error)
	GetContainerStatus(ctx context.Context, in *GetContainerStatusReq, opts ...grpc.CallOption) (*GetContainerStatusRes, error)
}

type containerGRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContainerGRPCServiceClient(cc grpc.ClientConnInterface) ContainerGRPCServiceClient {
	return &containerGRPCServiceClient{cc}
}

func (c *containerGRPCServiceClient) Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error) {
	out := new(HelloResp)
	err := c.cc.Invoke(ctx, ContainerGRPCService_Hello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerGRPCServiceClient) ContainerTerminatedAccidentally(ctx context.Context, in *ContainerTerminatedAccidentallyReq, opts ...grpc.CallOption) (*ContainerTerminatedAccidentallyRes, error) {
	out := new(ContainerTerminatedAccidentallyRes)
	err := c.cc.Invoke(ctx, ContainerGRPCService_ContainerTerminatedAccidentally_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerGRPCServiceClient) StopContainerCreditLimit(ctx context.Context, in *StopUserContainerCreditLimitReq, opts ...grpc.CallOption) (*StopUserContainerCreditLimitRes, error) {
	out := new(StopUserContainerCreditLimitRes)
	err := c.cc.Invoke(ctx, ContainerGRPCService_StopContainerCreditLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerGRPCServiceClient) GetContainerStatus(ctx context.Context, in *GetContainerStatusReq, opts ...grpc.CallOption) (*GetContainerStatusRes, error) {
	out := new(GetContainerStatusRes)
	err := c.cc.Invoke(ctx, ContainerGRPCService_GetContainerStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContainerGRPCServiceServer is the server API for ContainerGRPCService service.
// All implementations must embed UnimplementedContainerGRPCServiceServer
// for forward compatibility
type ContainerGRPCServiceServer interface {
	Hello(context.Context, *HelloReq) (*HelloResp, error)
	ContainerTerminatedAccidentally(context.Context, *ContainerTerminatedAccidentallyReq) (*ContainerTerminatedAccidentallyRes, error)
	StopContainerCreditLimit(context.Context, *StopUserContainerCreditLimitReq) (*StopUserContainerCreditLimitRes, error)
	GetContainerStatus(context.Context, *GetContainerStatusReq) (*GetContainerStatusRes, error)
	mustEmbedUnimplementedContainerGRPCServiceServer()
}

// UnimplementedContainerGRPCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContainerGRPCServiceServer struct {
}

func (UnimplementedContainerGRPCServiceServer) Hello(context.Context, *HelloReq) (*HelloResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedContainerGRPCServiceServer) ContainerTerminatedAccidentally(context.Context, *ContainerTerminatedAccidentallyReq) (*ContainerTerminatedAccidentallyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerTerminatedAccidentally not implemented")
}
func (UnimplementedContainerGRPCServiceServer) StopContainerCreditLimit(context.Context, *StopUserContainerCreditLimitReq) (*StopUserContainerCreditLimitRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopContainerCreditLimit not implemented")
}
func (UnimplementedContainerGRPCServiceServer) GetContainerStatus(context.Context, *GetContainerStatusReq) (*GetContainerStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainerStatus not implemented")
}
func (UnimplementedContainerGRPCServiceServer) mustEmbedUnimplementedContainerGRPCServiceServer() {}

// UnsafeContainerGRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContainerGRPCServiceServer will
// result in compilation errors.
type UnsafeContainerGRPCServiceServer interface {
	mustEmbedUnimplementedContainerGRPCServiceServer()
}

func RegisterContainerGRPCServiceServer(s grpc.ServiceRegistrar, srv ContainerGRPCServiceServer) {
	s.RegisterService(&ContainerGRPCService_ServiceDesc, srv)
}

func _ContainerGRPCService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerGRPCServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerGRPCService_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerGRPCServiceServer).Hello(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerGRPCService_ContainerTerminatedAccidentally_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerTerminatedAccidentallyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerGRPCServiceServer).ContainerTerminatedAccidentally(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerGRPCService_ContainerTerminatedAccidentally_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerGRPCServiceServer).ContainerTerminatedAccidentally(ctx, req.(*ContainerTerminatedAccidentallyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerGRPCService_StopContainerCreditLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopUserContainerCreditLimitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerGRPCServiceServer).StopContainerCreditLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerGRPCService_StopContainerCreditLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerGRPCServiceServer).StopContainerCreditLimit(ctx, req.(*StopUserContainerCreditLimitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerGRPCService_GetContainerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerGRPCServiceServer).GetContainerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerGRPCService_GetContainerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerGRPCServiceServer).GetContainerStatus(ctx, req.(*GetContainerStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ContainerGRPCService_ServiceDesc is the grpc.ServiceDesc for ContainerGRPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContainerGRPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "containerservice.ContainerGRPCService",
	HandlerType: (*ContainerGRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _ContainerGRPCService_Hello_Handler,
		},
		{
			MethodName: "ContainerTerminatedAccidentally",
			Handler:    _ContainerGRPCService_ContainerTerminatedAccidentally_Handler,
		},
		{
			MethodName: "StopContainerCreditLimit",
			Handler:    _ContainerGRPCService_StopContainerCreditLimit_Handler,
		},
		{
			MethodName: "GetContainerStatus",
			Handler:    _ContainerGRPCService_GetContainerStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "container_grpc.proto",
}
